Index: src/main/java/ru/javawebinar/topjava/model/AbstractBaseEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/javawebinar/topjava/model/AbstractBaseEntity.java b/src/main/java/ru/javawebinar/topjava/model/AbstractBaseEntity.java
--- a/src/main/java/ru/javawebinar/topjava/model/AbstractBaseEntity.java	(revision 4767fe14cd50c57e79d0f2100a6851305f6b67cf)
+++ b/src/main/java/ru/javawebinar/topjava/model/AbstractBaseEntity.java	(date 1614779878609)
@@ -1,6 +1,7 @@
 package ru.javawebinar.topjava.model;
 
 import org.hibernate.Hibernate;
+import org.springframework.data.domain.Persistable;
 import org.springframework.util.Assert;
 
 import javax.persistence.*;
@@ -8,7 +9,7 @@
 @MappedSuperclass
 // http://stackoverflow.com/questions/594597/hibernate-annotations-which-is-better-field-or-property-access
 @Access(AccessType.FIELD)
-public abstract class AbstractBaseEntity {
+public abstract class AbstractBaseEntity implements Persistable<Integer> {
     public static final int START_SEQ = 100000;
 
     @Id
@@ -29,6 +30,7 @@
         this.id = id;
     }
 
+    @Override
     public Integer getId() {
         return id;
     }
@@ -38,6 +40,7 @@
         return id;
     }
 
+    @Override
     public boolean isNew() {
         return this.id == null;
     }
Index: src/test/java/ru/javawebinar/topjava/Profiles.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/ru/javawebinar/topjava/Profiles.java b/src/test/java/ru/javawebinar/topjava/Profiles.java
--- a/src/test/java/ru/javawebinar/topjava/Profiles.java	(revision 4767fe14cd50c57e79d0f2100a6851305f6b67cf)
+++ b/src/test/java/ru/javawebinar/topjava/Profiles.java	(date 1614779878634)
@@ -7,9 +7,10 @@
 public class Profiles {
     public static final String
             JDBC = "jdbc",
-            JPA = "jpa";
+            JPA = "jpa",
+            DATAJPA = "datajpa";
 
-    public static final String REPOSITORY_IMPLEMENTATION = JPA;
+    public static final String REPOSITORY_IMPLEMENTATION = DATAJPA;
 
     public static final String
             POSTGRES_DB = "postgres",
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision 4767fe14cd50c57e79d0f2100a6851305f6b67cf)
+++ b/pom.xml	(date 1614781950227)
@@ -16,7 +16,8 @@
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
         <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
 
-        <spring.version>5.3.3</spring.version>
+        <spring.version>5.3.4</spring.version>
+        <spring-data-jpa.version>2.4.5</spring-data-jpa.version>
         <tomcat.version>9.0.43</tomcat.version>
 
         <!-- Logging -->
@@ -85,12 +86,11 @@
         <dependency>
             <groupId>org.springframework</groupId>
             <artifactId>spring-context</artifactId>
-            <version>${spring.version}</version>
         </dependency>
         <dependency>
-            <groupId>org.springframework</groupId>
-            <artifactId>spring-orm</artifactId>
-            <version>${spring.version}</version>
+            <groupId>org.springframework.data</groupId>
+            <artifactId>spring-data-jpa</artifactId>
+            <version>${spring-data-jpa.version}</version>
         </dependency>
 
         <!--- ORM -->
@@ -137,7 +137,6 @@
         <dependency>
             <groupId>org.springframework</groupId>
             <artifactId>spring-test</artifactId>
-            <version>${spring.version}</version>
             <scope>test</scope>
         </dependency>
         <dependency>
@@ -188,5 +187,14 @@
     </profiles>
 
     <dependencyManagement>
+        <dependencies>
+            <dependency>
+                <groupId>org.springframework</groupId>
+                <artifactId>spring-framework-bom</artifactId>
+                <version>${spring.version}</version>
+                <type>pom</type>
+                <scope>import</scope>
+            </dependency>
+        </dependencies>
     </dependencyManagement>
 </project>
Index: src/main/java/ru/javawebinar/topjava/repository/datajpa/CrudMealRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/javawebinar/topjava/repository/datajpa/CrudMealRepository.java b/src/main/java/ru/javawebinar/topjava/repository/datajpa/CrudMealRepository.java
new file mode 100644
--- /dev/null	(date 1614779878613)
+++ b/src/main/java/ru/javawebinar/topjava/repository/datajpa/CrudMealRepository.java	(date 1614779878613)
@@ -0,0 +1,7 @@
+package ru.javawebinar.topjava.repository.datajpa;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+import ru.javawebinar.topjava.model.Meal;
+
+public interface CrudMealRepository extends JpaRepository<Meal, Integer> {
+}
Index: src/main/java/ru/javawebinar/topjava/repository/datajpa/DataJpaUserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/javawebinar/topjava/repository/datajpa/DataJpaUserRepository.java b/src/main/java/ru/javawebinar/topjava/repository/datajpa/DataJpaUserRepository.java
new file mode 100644
--- /dev/null	(date 1614779878624)
+++ b/src/main/java/ru/javawebinar/topjava/repository/datajpa/DataJpaUserRepository.java	(date 1614779878624)
@@ -0,0 +1,44 @@
+package ru.javawebinar.topjava.repository.datajpa;
+
+import org.springframework.data.domain.Sort;
+import org.springframework.stereotype.Repository;
+import ru.javawebinar.topjava.model.User;
+import ru.javawebinar.topjava.repository.UserRepository;
+
+import java.util.List;
+
+@Repository
+public class DataJpaUserRepository implements UserRepository {
+    private static final Sort SORT_NAME_EMAIL = Sort.by(Sort.Direction.ASC, "name", "email");
+
+    private final CrudUserRepository crudRepository;
+
+    public DataJpaUserRepository(CrudUserRepository crudRepository) {
+        this.crudRepository = crudRepository;
+    }
+
+    @Override
+    public User save(User user) {
+        return crudRepository.save(user);
+    }
+
+    @Override
+    public boolean delete(int id) {
+        return crudRepository.delete(id) != 0;
+    }
+
+    @Override
+    public User get(int id) {
+        return crudRepository.findById(id).orElse(null);
+    }
+
+    @Override
+    public User getByEmail(String email) {
+        return crudRepository.getByEmail(email);
+    }
+
+    @Override
+    public List<User> getAll() {
+        return crudRepository.findAll(SORT_NAME_EMAIL);
+    }
+}
Index: src/main/java/ru/javawebinar/topjava/repository/datajpa/CrudUserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/javawebinar/topjava/repository/datajpa/CrudUserRepository.java b/src/main/java/ru/javawebinar/topjava/repository/datajpa/CrudUserRepository.java
new file mode 100644
--- /dev/null	(date 1614779878617)
+++ b/src/main/java/ru/javawebinar/topjava/repository/datajpa/CrudUserRepository.java	(date 1614779878617)
@@ -0,0 +1,19 @@
+package ru.javawebinar.topjava.repository.datajpa;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Modifying;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.query.Param;
+import org.springframework.transaction.annotation.Transactional;
+import ru.javawebinar.topjava.model.User;
+
+@Transactional(readOnly = true)
+public interface CrudUserRepository extends JpaRepository<User, Integer> {
+    @Transactional
+    @Modifying
+//    @Query(name = User.DELETE)
+    @Query("DELETE FROM User u WHERE u.id=:id")
+    int delete(@Param("id") int id);
+
+    User getByEmail(String email);
+}
Index: src/main/java/ru/javawebinar/topjava/repository/datajpa/DataJpaMealRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/javawebinar/topjava/repository/datajpa/DataJpaMealRepository.java b/src/main/java/ru/javawebinar/topjava/repository/datajpa/DataJpaMealRepository.java
new file mode 100644
--- /dev/null	(date 1614779878621)
+++ b/src/main/java/ru/javawebinar/topjava/repository/datajpa/DataJpaMealRepository.java	(date 1614779878621)
@@ -0,0 +1,43 @@
+package ru.javawebinar.topjava.repository.datajpa;
+
+import org.springframework.stereotype.Repository;
+import ru.javawebinar.topjava.model.Meal;
+import ru.javawebinar.topjava.repository.MealRepository;
+
+import java.time.LocalDateTime;
+import java.util.List;
+
+@Repository
+public class DataJpaMealRepository implements MealRepository {
+
+    private final CrudMealRepository crudRepository;
+
+    public DataJpaMealRepository(CrudMealRepository crudRepository) {
+        this.crudRepository = crudRepository;
+    }
+
+    @Override
+    public Meal save(Meal meal, int userId) {
+        return null;
+    }
+
+    @Override
+    public boolean delete(int id, int userId) {
+        return false;
+    }
+
+    @Override
+    public Meal get(int id, int userId) {
+        return null;
+    }
+
+    @Override
+    public List<Meal> getAll(int userId) {
+        return null;
+    }
+
+    @Override
+    public List<Meal> getBetweenHalfOpen(LocalDateTime startDateTime, LocalDateTime endDateTime, int userId) {
+        return null;
+    }
+}
Index: src/main/resources/spring/spring-db.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/spring/spring-db.xml b/src/main/resources/spring/spring-db.xml
--- a/src/main/resources/spring/spring-db.xml	(revision 4767fe14cd50c57e79d0f2100a6851305f6b67cf)
+++ b/src/main/resources/spring/spring-db.xml	(date 1614779878628)
@@ -4,12 +4,17 @@
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:jdbc="http://www.springframework.org/schema/jdbc"
        xmlns:tx="http://www.springframework.org/schema/tx"
+       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
-       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
+       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
+       http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">
 
-    <context:component-scan base-package="ru.javawebinar.**.repository.jpa"/>
+<!--    <context:component-scan base-package="ru.javawebinar.**.repository.jpa"/>-->
+
+    <context:component-scan base-package="ru.javawebinar.**.repository.datajpa"/>
+    <jpa:repositories base-package="ru.javawebinar.**.repository.datajpa"/>
 
     <jdbc:initialize-database data-source="dataSource" enabled="${database.init}">
         <jdbc:script location="${jdbc.initLocation}"/>
@@ -85,4 +90,11 @@
               p:username="${database.username}"
               p:password="${database.password}"/>
     </beans>
+
+    <beans profile="jdbc">
+    </beans>
+    <beans profile="jpa">
+    </beans>
+    <beans profile="datajpa">
+    </beans>
 </beans>
\ No newline at end of file
